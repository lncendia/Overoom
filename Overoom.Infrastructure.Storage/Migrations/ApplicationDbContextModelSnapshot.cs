// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Overoom.Infrastructure.Storage.Context;

#nullable disable

namespace Overoom.Infrastructure.Storage.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("CdnModelVoiceModel", b =>
                {
                    b.Property<long>("CdnModelId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VoicesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CdnModelId", "VoicesId");

                    b.HasIndex("VoicesId");

                    b.ToTable("CndVoices", (string)null);
                });

            modelBuilder.Entity("CountryModelFilmModel", b =>
                {
                    b.Property<long>("CountriesId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FilmModelId")
                        .HasColumnType("TEXT");

                    b.HasKey("CountriesId", "FilmModelId");

                    b.HasIndex("FilmModelId");

                    b.ToTable("FilmCountries", (string)null);
                });

            modelBuilder.Entity("FilmModelGenreModel", b =>
                {
                    b.Property<Guid>("FilmModelId")
                        .HasColumnType("TEXT");

                    b.Property<long>("GenresId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmModelId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("FilmGenres", (string)null);
                });

            modelBuilder.Entity("FilmModelPersonModel", b =>
                {
                    b.Property<long>("DirectorsId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FilmModelId")
                        .HasColumnType("TEXT");

                    b.HasKey("DirectorsId", "FilmModelId");

                    b.HasIndex("FilmModelId");

                    b.ToTable("FilmDirectors", (string)null);
                });

            modelBuilder.Entity("FilmModelPersonModel1", b =>
                {
                    b.Property<Guid>("FilmModel1Id")
                        .HasColumnType("TEXT");

                    b.Property<long>("ScreenWritersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FilmModel1Id", "ScreenWritersId");

                    b.HasIndex("ScreenWritersId");

                    b.ToTable("FilmScreenWriters", (string)null);
                });

            modelBuilder.Entity("GenreModelPlaylistModel", b =>
                {
                    b.Property<long>("GenresId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlaylistModelId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresId", "PlaylistModelId");

                    b.HasIndex("PlaylistModelId");

                    b.ToTable("PlaylistGenres", (string)null);
                });

            modelBuilder.Entity("GenreModelUserModel", b =>
                {
                    b.Property<long>("GenresId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserModelId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresId", "UserModelId");

                    b.HasIndex("UserModelId");

                    b.ToTable("UserGenres", (string)null);
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Comment.CommentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Country.CountryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.CdnModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmCdns");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.FilmActorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<long>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("PersonId");

                    b.ToTable("FilmActors");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.FilmModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CountEpisodes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CountSeasons")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UserRating")
                        .HasColumnType("REAL");

                    b.Property<int>("UserRatingsCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmMessageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewerEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ViewerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ViewerId");

                    b.ToTable("FilmRoomMessages");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmRoomModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CdnType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<int>("IdCounter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmRooms");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmViewerModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Beep")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Change")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FullScreen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Online")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Pause")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Scream")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Series")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeLine")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("FilmRoomViewers");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Genre.GenreModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Person.PersonModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistFilmModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistFilms");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Rating.RatingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Score")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Room.YoutubeRoom.VideoIdModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("YoutubeRoomVideoIds");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.HistoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AvatarUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Beep")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Change")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Scream")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.WatchlistModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FilmId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("UserWatchlist");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Voice.VoiceModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Voices");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeMessageModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewerEntityId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ViewerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ViewerId");

                    b.ToTable("YoutubeRoomMessages");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeRoomModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Access")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdCounter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("YoutubeRooms");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeViewerModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Beep")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Change")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentVideoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EntityId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FullScreen")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Online")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Pause")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Scream")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TimeLine")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("YoutubeRoomViewers");
                });

            modelBuilder.Entity("CdnModelVoiceModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.CdnModel", null)
                        .WithMany()
                        .HasForeignKey("CdnModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Voice.VoiceModel", null)
                        .WithMany()
                        .HasForeignKey("VoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryModelFilmModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Country.CountryModel", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", null)
                        .WithMany()
                        .HasForeignKey("FilmModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmModelGenreModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", null)
                        .WithMany()
                        .HasForeignKey("FilmModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Genre.GenreModel", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmModelPersonModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Person.PersonModel", null)
                        .WithMany()
                        .HasForeignKey("DirectorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", null)
                        .WithMany()
                        .HasForeignKey("FilmModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmModelPersonModel1", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", null)
                        .WithMany()
                        .HasForeignKey("FilmModel1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Person.PersonModel", null)
                        .WithMany()
                        .HasForeignKey("ScreenWritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreModelPlaylistModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Genre.GenreModel", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistModel", null)
                        .WithMany()
                        .HasForeignKey("PlaylistModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreModelUserModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Genre.GenreModel", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.User.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Comment.CommentModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.CdnModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany("CdnList")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.FilmActorModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany("Actors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Person.PersonModel", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmMessageModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmRoomModel", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmViewerModel", "Viewer")
                        .WithMany()
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmRoomModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmViewerModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmRoomModel", "Room")
                        .WithMany("Viewers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistFilmModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistModel", "Playlist")
                        .WithMany("Films")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Rating.RatingModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Room.YoutubeRoom.VideoIdModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeRoomModel", "Room")
                        .WithMany("VideoIds")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.HistoryModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.User.UserModel", "User")
                        .WithMany("History")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.WatchlistModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.Film.FilmModel", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.User.UserModel", "User")
                        .WithMany("Watchlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeMessageModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeRoomModel", "Room")
                        .WithMany("Messages")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeViewerModel", "Viewer")
                        .WithMany()
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Viewer");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeViewerModel", b =>
                {
                    b.HasOne("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeRoomModel", "Room")
                        .WithMany("Viewers")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Film.FilmModel", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("CdnList");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.FilmRoom.FilmRoomModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Viewers");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.Playlist.PlaylistModel", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.User.UserModel", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Watchlist");
                });

            modelBuilder.Entity("Overoom.Infrastructure.Storage.Models.YoutubeRoom.YoutubeRoomModel", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("VideoIds");

                    b.Navigation("Viewers");
                });
#pragma warning restore 612, 618
        }
    }
}
